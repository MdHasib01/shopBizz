generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String
  
  userId     String? @db.ObjectId 
  shopId     String? @db.ObjectId 
  productsId String? @db.ObjectId


  users       users?    @relation(fields: [userId], references: [id])
  shops       shops?    @relation(fields: [shopId], references: [id])
  products    products? @relation(fields: [productsId], references: [id])
}

model users {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  password    String?
  following   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   shopFollows   shopFollowers[] 
   orders        orders[] 
  images      images[]
  shopReviews shopReviews[]
}

model shopReviews {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  user      users @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String? @db.ObjectId
  shops     shops? @relation(fields: [shopsId], references: [id])
}

model shopFollowers {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String  @db.ObjectId
  userId    String  @db.ObjectId
  createdAt DateTime @default(now())

  shop      shops   @relation(fields: [shopId], references: [id])
  user      users   @relation(fields: [userId], references: [id])

  // prevent duplicate follows
  @@unique([shopId, userId], name: "shop_user_unique")
  @@index([userId])
  @@index([shopId])
}


model shops {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String
  category      String
  avatar        String?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  ratings       Float @default(0)
  reviewes      shopReviews[]  
  sellerId      String @unique @db.ObjectId
  sellers       sellers @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  followers     shopFollowers[] 
  images        images[]  
  products      products[]
  productAnalytics productAnalytics[] 
  orders          orders[]
  
}

model sellers {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String @unique
  phone_number String
  country      String
  password     String?
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopid       String? @db.ObjectId
}

model site_config {
  id            String @id @default(auto()) @map("_id") @db.ObjectId  
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String @unique
  sellerId      String @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String @unique
  category              String    
  subCategory           String   
  short_description     String
  detailed_description  String
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean? @default(false)
  cash_on_delivery      String?
  discount_codes        String[] @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  shopId                String @db.ObjectId
  
  images                images[]
  shop                  shops @relation(fields: [shopId], references: [id])
  productAnalytics      productAnalytics[]
}

// Add these new models at the end of the file:

model userAnalytics {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique
  lastVisited DateTime
  lastTrained DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  country     String?
  city        String?
  device      String?
  actions     Json[]   // Array of action objects with productId, shopId, action, timestamp

  @@map("userAnalytics")
}

model productAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @unique @db.ObjectId
  shopId        String   @db.ObjectId
  views         Int      @default(0)
  cartAdds      Int      @default(0)
  wishlistAdds  Int      @default(0)
  purchases     Int      @default(0)
  lastViewedAt  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product       products @relation(fields: [productId], references: [id], onDelete: Cascade)
  shop          shops    @relation(fields: [shopId], references: [id])

  @@map("productAnalytics")
}

enum orderStatus {
  Pending
  Paid
  Processing
  Shipped
  Delivered
  Cancelled
  Refunded
}

model orders {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String   @unique

  // who placed the order
  orderBy         String   @db.ObjectId
  user            users    @relation(fields: [orderBy], references: [id])

  // ðŸ‘‡ add these so your groupBy works
  shopId          String   @db.ObjectId
  shop            shops    @relation(fields: [shopId], references: [id])

  // ðŸ‘‡ totals (so you can _sum.total)
  subtotal        Float    @default(0)
  shipping        Float    @default(0)
  discount        Float    @default(0)
  tax             Float    @default(0)
  total           Float    @default(0)
  currency        String   @default("BDT")

  status          orderStatus @default(Pending)
  shippingAddress Json
  billingAddress  Json?
  notes           String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([orderBy])
  @@index([shopId])  // ðŸ‘ˆ important for your groupBy + lookup
  @@index([status])
}
